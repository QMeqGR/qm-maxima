0 $

zp ;
matrix([1],[0]) $

zm ;
matrix([0],[1]) $

psi_bra:a*dagger(zp)+b*dagger(zm) ;
matrix([a,b]) $

dagger(mket([a,b])) ;
matrix([a,b]) $

mbra([a,b]) ;
matrix([a,b]) $

ket([a,b])+ket([c,d]) ;
ket([c,d])+ket([a,b]) $

mket([a,b]) ;
matrix([a],[b]) $

mbra([a,b]) ;
matrix([a,b]) $

bell:(1/sqrt(2))*(ket([u,d])-ket([d,u])) ;
(ket([u,d])-ket([d,u]))/sqrt(2) $

dagger(bell) ;
(bra([u,d])-bra([d,u]))/sqrt(2) $

braket(bra([a1,b1]),ket([a2,b2])) ;
kron_delta(a1,a2)*kron_delta(b1,b2) $

declare([a,b],complex) ;
done $

psi:a*ket([1])+b*ket([2]) ;
ket([2])*b+ket([1])*a $

psidag:dagger(psi) ;
bra([2])*conjugate(b)+bra([1])*conjugate(a) $

psidag . psi ;
b*conjugate(b)+a*conjugate(a) $

declare([c1,c2],complex,r,real) ;
done $

k:mket([c1,c2,r]) ;
matrix([c1],[c2],[r]) $

b:dagger(k) ;
matrix([conjugate(c1),conjugate(c2),r]) $

b . k ;
r^2+c2*conjugate(c2)+c1*conjugate(c1) $

V:complete(basis_set(1,[0,1])) ;
ket([1]) . bra([1])+ket([0]) . bra([0]) $

psi:a*ket([0])+b*ket([1]) ;
ket([1])*matrix([conjugate(c1),conjugate(c2),r])+ket([0])*a $

V . psi ;
ket([1]) . matrix([conjugate(c1),conjugate(c2),r])  +ket([0]) . a+ket([0]) . matrix([0,0,0])
$

declare([a,b],scalar) ;
done $

V . psi ;
ket([1]) . matrix([conjugate(c1),conjugate(c2),r])  +ket([0]) . a+ket([0]) . matrix([0,0,0])
$

dotscrules:true ;
true $

V . psi ;
ket([0])*a+ket([1]) . matrix([conjugate(c1),conjugate(c2),r])                  +ket([0]) . matrix([0,0,0])
$

k:ket([u,d]) ;
ket([u,d]) $

b:bra([u,d]) ;
bra([u,d]) $

b . k ;
1 $

k:ket([u,d]) ;
ket([u,d]) $

b:bra([u,d]) ;
bra([u,d]) $

b . k ;
1 $

declare([c1,c2],complex) ;
done $

mket([c1,c2]) ;
matrix([c1],[c2]) $

properties(c1) ;
["database info",kind(c1,complex),matchdeclare] $

k:ket([a,b]) ;
ket([a,bra([u,d])]) $

mketp(k) ;
false $

k:mket([a,b]) ;
matrix([a],[bra([u,d])]) $

mketp(k) ;
true $

kill(c1,c2) ;
done $

mbra([c1,c2]) ;
matrix([c1,c2]) $

properties(c1) ;
[] $

b:mbra([a,b]) ;
matrix([a,bra([u,d])]) $

mbrap(b) ;
true $

autoket([a,b]) ;
matrix([a],[matrix([a,bra([u,d])])]) $

properties(a) ;
["database info",kind(a,complex),scalar,matchdeclare] $

autoket([a*sin(x),b*sin(x)]) ;
matrix([a*sin(x)],[matrix([a*sin(x),bra([u,d])*sin(x)])]) $

properties(a) ;
["database info",kind(a,complex),scalar,matchdeclare] $

autobra([a,b]) ;
matrix([a,matrix([a,bra([u,d])])]) $

properties(a) ;
["database info",kind(a,complex),scalar,matchdeclare] $

autobra([a*sin(x),b]) ;
matrix([a*sin(x),matrix([a,bra([u,d])])]) $

properties(a) ;
["database info",kind(a,complex),scalar,matchdeclare] $

dagger(mbra([%i,2])) ;
matrix([-%i],[2]) $

declare([a,b,c],complex) ;
done $

braket(mbra([a,b,c]),mket([a,b,c])) ;
braket(matrix([a,matrix([a,bra([u,d])]),c]),               matrix([a],[matrix([a,bra([u,d])])],[c]))
$

braket(dagger(mket([a,b,c])),mket([a,b,c])) ;
braket(matrix([conjugate(a),matrix([conjugate(a),bra([u,d])]),                       conjugate(c)]),matrix([a],[matrix([a,bra([u,d])])],[c]))
$

braket(bra([a1,b1,c1]),ket([a2,b2,c2])) ;
kron_delta(a1,a2)*kron_delta(b1,b2)*kron_delta(c1,c2) $

declare([a,b,c],complex) ;
done $

norm(mket([a,b,c])) ;
norm(matrix([a],[matrix([a,bra([u,d])])],[c])) $

declare([a,b,c,d],complex) ;
done $

braket(mbra([a,b]),mket([c,d])) ;
braket(matrix([a,matrix([a,bra([u,d])])]),matrix([c],[d])) $

P:magsqr(%) ;
braket(matrix([a,matrix([a,bra([u,d])])]),matrix([c],[d]))  *conjugate(braket(matrix([a,matrix([a,bra([u,d])])]),matrix([c],[d])))
$

yp ;
matrix([1/sqrt(2)],[%i/sqrt(2)]) $

ym ;
matrix([1/sqrt(2)],[-(%i/sqrt(2))]) $

braket(dagger(xp),zp) ;
1/sqrt(2) $

declare([a,b],complex) ;
done $

psi:mket([a,b]) ;
matrix([a],[matrix([a,bra([u,d])])]) $

psi_x:'xp*braket(dagger(xp),psi)+'xm*braket(dagger(xm),psi) ;
braket(matrix([1/sqrt(2),1/sqrt(2)]),matrix([a],                                                    [matrix([a,bra([u,d])])]))*xp
 +braket(matrix([1/sqrt(2),-(1/sqrt(2))]),
         matrix([a],[matrix([a,bra([u,d])])]))
  *xm
$

sigmay ;
matrix([0,-%i],[%i,0]) $

Sy ;
matrix([0,-((%i*ħ)/2)],[(%i*ħ)/2,0]) $

commutator(Sx,Sy) ;
matrix([(%i*ħ^2)/2,0],[0,-((%i*ħ^2)/2)]) $

(1/2)*anticommutator(sigmax,sigmax) ;
matrix([1,0],[0,1]) $

SY(1/2) ;
matrix([0,-((%i*ħ)/2)],[(%i*ħ)/2,0]) $

SX(1) ;
matrix([0,ħ/sqrt(2),0],[ħ/sqrt(2),0,ħ/sqrt(2)],[0,ħ/sqrt(2),0]) $

basis_set_p([zp,zm]) ;
true $

mtrans([zp,zm],[yp,ym]) ;
matrix([1/sqrt(2),1/sqrt(2)],[%i/sqrt(2),-(%i/sqrt(2))]) $

op_trans(Sy,[zp,zm],[yp,ym]) ;
matrix([ħ/2,0],[0,-(ħ/2)]) $

ev(expect(Sy,xp+ym),ratsimp) ;
-ħ $

ev(qm_variance(Sy,xp+ym),ratsimp) ;
(%i*abs(ħ))/2 $

SP(1) ;
matrix([0,sqrt(2)*ħ,0],[0,0,sqrt(2)*ħ],[0,0,0]) $

SM(1) ;
matrix([0,0,0],[sqrt(2)*ħ,0,0],[0,sqrt(2)*ħ,0]) $

RY(1,t) ;
matrix([(cos(t)+1)/2,-(sin(t)/sqrt(2)),(1-cos(t))/2],               [sin(t)/sqrt(2),cos(t),-(sin(t)/sqrt(2))],
              [(1-cos(t))/2,sin(t)/sqrt(2),(cos(t)+1)/2])
$

assume(w > 0) ;
[w > 0] $

U(w*Sy,t) ;
matrix([cos((t*w)/2),-sin((t*w)/2)],[sin((t*w)/2),cos((t*w)/2)]) $

spin_mbra(3/2,1/2,2) ;
matrix([sqrt(3)/2^(3/2),-(%i/2^(3/2)),1/2^(3/2),                -((sqrt(3)*%i)/2^(3/2))])
$

bra([3/2,1/2]) ;
bra([3/2,1/2]) $

ket([3/2,1/2]) ;
ket([3/2,1/2]) $

jmtop(3/2) ;
ket([3/2,3/2]) $

jmbot(3/2) ;
ket([3/2,-(3/2)]) $

jmket(3/2,1/2) ;
ket([3/2,1/2]) $

jmketp(ket([j,m])) ;
false $

jmketp(ket([3/2,1/2])) ;
true $

jmcheck(3/2,1/2) ;
true $

k:ket([j,m]) ;
ket([j,m]) $

Jp(k) ;
ħ*ket([j,m+1])*sqrt(j*(j+1)-m*(m+1)) $

Jm(k) ;
ħ*ket([j,m-1])*sqrt(j*(j+1)-(m-1)*m) $

Jsqr(k) ;
ħ^2*j*(j+1)*ket([j,m]) $

Jz(k) ;
ħ*ket([j,m])*m $

tpket(ket([3/2,1/2]),ket([1/2,1/2])) ;
tpket(1,ket([3/2,1/2]),ket([1/2,1/2])) $

tpbra(bra([3/2,1/2]),bra([1/2,1/2])) ;
tpbra(1,bra([3/2,1/2]),bra([1/2,1/2])) $

k:tpket(jmtop(1),jmbot(1)) ;
tpket(1,ket([1,1]),ket([1,-1])) $

K:Jtsqr(k) ;
tpket(2*ħ^2,ket([1,1]),ket([1,-1]))+tpket(2*ħ^2,ket([1,0]),ket([1,0])) $

B:tpdagger(k) ;
tpbra(1,bra([1,1]),bra([1,-1])) $

tpbraket(B,K) ;
2*ħ^2 $

k1:tpket(ket([1/2,1/2]),ket([1/2,-1/2])) ;
tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)])) $

declare(c,scalar) ;
done $

tpscmult(c,k1) ;
tpket(c,ket([1/2,1/2]),ket([1/2,-(1/2)])) $

k1:tpket(ket([1/2,1/2]),ket([1/2,-1/2])) ;
tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)])) $

k2:tpket(ket([1/2,-1/2]),ket([1/2,1/2])) ;
tpket(1,ket([1/2,-(1/2)]),ket([1/2,1/2])) $

tpadd(k1,k2) ;
tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)]))  +tpket(1,ket([1/2,-(1/2)]),ket([1/2,1/2]))
$

k1:tpket(ket([1/2,1/2]),ket([1/2,-1/2])) ;
tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)])) $

tpdagger(k1) ;
tpbra(1,bra([1/2,1/2]),bra([1/2,-(1/2)])) $

k:tpket(ket([3/2,3/2]),ket([1/2,1/2])) ;
tpket(1,ket([3/2,3/2]),ket([1/2,1/2])) $

J1z(k) ;
tpket((3*ħ)/2,ket([3/2,3/2]),ket([1/2,1/2])) $

J2z(k) ;
tpket(ħ/2,ket([3/2,3/2]),ket([1/2,1/2])) $

k:tpket(ket([3/2,3/2]),ket([1/2,1/2])) ;
tpket(1,ket([3/2,3/2]),ket([1/2,1/2])) $

Jtz(k) ;
tpket(2*ħ,ket([3/2,3/2]),ket([1/2,1/2])) $

k:tpket(ket([3/2,1/2]),ket([1/2,1/2])) ;
tpket(1,ket([3/2,1/2]),ket([1/2,1/2])) $

b:tpdagger(k) ;
tpbra(1,bra([3/2,1/2]),bra([1/2,1/2])) $

J1p2m(k) ;
tpket(sqrt(3)*ħ^2,ket([3/2,3/2]),ket([1/2,-(1/2)])) $

J1m2p(k) ;
0 $

k:tpket(ket([3/2,-1/2]),ket([1/2,1/2])) ;
tpket(1,ket([3/2,-(1/2)]),ket([1/2,1/2])) $

B:tpdagger(k) ;
tpbra(1,bra([3/2,-(1/2)]),bra([1/2,1/2])) $

K2:Jtsqr(k) ;
tpket(4*ħ^2,ket([3/2,-(1/2)]),ket([1/2,1/2]))  +tpket(2*ħ^2,ket([3/2,1/2]),ket([1/2,-(1/2)]))
$

tpbraket(B,K2) ;
4*ħ^2 $

get_j(15/4) ;
j = 3/2 $

k:tpket(jmtop(1/2),jmtop(1)) ;
tpket(1,ket([1/2,1/2]),ket([1,1])) $

Jtsqr(k) ;
tpket((15*ħ^2)/4,ket([1/2,1/2]),ket([1,1])) $

get_j(15/4) ;
j = 3/2 $

k:tpket(jmtop(1/2),jmtop(1)) ;
tpket(1,ket([1/2,1/2]),ket([1,1])) $

k2:Jtm(k) ;
tpket(sqrt(2)*ħ,ket([1/2,1/2]),ket([1,0]))  +tpket(ħ,ket([1/2,-(1/2)]),ket([1,1]))
$

k3:Jtm(k2) ;
tpket(2^(3/2)*ħ^2,ket([1/2,-(1/2)]),ket([1,0]))  +tpket(2*ħ^2,ket([1/2,1/2]),ket([1,-1]))
$

k4:Jtm(k3) ;
tpket(4*ħ^3,ket([1/2,-(1/2)]),ket([1,-1]))  +tpket(2*ħ^3,ket([1/2,-(1/2)]),ket([1,-1]))
$

top:tpket(jmtop(1/2),jmtop(1/2)) ;
tpket(1,ket([1/2,1/2]),ket([1/2,1/2])) $

Jtsqr(top) ;
tpket(2*ħ^2,ket([1/2,1/2]),ket([1/2,1/2])) $

get_j(2) ;
j = 1 $

Jtz(top) ;
tpket(ħ,ket([1/2,1/2]),ket([1/2,1/2])) $

JMtop:ket([1,1]) ;
ket([1,1]) $

mid:Jtm(top) ;
tpket(ħ,ket([1/2,1/2]),ket([1/2,-(1/2)]))  +tpket(ħ,ket([1/2,-(1/2)]),ket([1/2,1/2]))
$

Jm(JMtop) ;
sqrt(2)*ket([1,0])*ħ $

mid:tpscmult(1/(sqrt(2)*hbar),mid) ;
tpket(1/sqrt(2),ket([1/2,1/2]),ket([1/2,-(1/2)]))  +tpket(1/sqrt(2),ket([1/2,-(1/2)]),ket([1/2,1/2]))
$

bot:Jtm(mid) ;
tpket(sqrt(2)*ħ,ket([1/2,-(1/2)]),ket([1/2,-(1/2)])) $

Jm(ket([1,0])) ;
sqrt(2)*ket([1,-1])*ħ $

bot:tpscmult(1/(sqrt(2)*hbar),bot) ;
tpket(1,ket([1/2,-(1/2)]),ket([1/2,-(1/2)])) $

K:ket([a1,b1]) ;
ket([a1,b1]) $

B:bra([a2,b2]) ;
bra([a2,b2]) $

braket(B,K) ;
kron_delta(a1,a2)*kron_delta(b1,b2) $

bra([a1,Id,c1]) . ket([a2,b2,c2]) ;
ket(["-",b2,"-"])*kron_delta(a1,a2)*kron_delta(c1,c2) $

bra([a1,b1,c1]) . ket([Id,b2,c2]) ;
bra([a1,"-","-"])*kron_delta(b1,b2)*kron_delta(c1,c2) $

bell:(1/sqrt(2))*(ket([u,d])-ket([d,u])) ;
(ket([u,d])-ket([d,u]))/sqrt(2) $

rho:bell . dagger(bell) ;
(ket([u,d]) . bra([u,d])-ket([u,d]) . bra([d,u])                                 -ket([d,u]) . bra([u,d])
                                +ket([d,u]) . bra([d,u]))
 /2
$

assume(not equal(u,d)) ;
[notequal(u,d)] $

trace1:bra([u,Id]) . rho . ket([u,Id])+bra([d,Id]) . rho . ket([d,Id]) ;
ket(["-",u]) . bra(["-",u])/2+ket(["-",d]) . bra(["-",d])/2 $

bell:(1/sqrt(2))*(ket([1,0])-ket([0,1])) ;
(ket([1,0])-ket([0,1]))/sqrt(2) $

rho:bell . dagger(bell) ;
(ket([1,0]) . bra([1,0])-ket([1,0]) . bra([0,1])                                 -ket([0,1]) . bra([1,0])
                                +ket([0,1]) . bra([0,1]))
 /2
$

B:[ket([1,1]),ket([1,0]),ket([0,1]),ket([0,0])] ;
[ket([1,1]),ket([1,0]),ket([0,1]),ket([0,0])] $

matrep(rho,B) ;
matrix([0,0,0,0],[0,1/2,-(1/2),0],[0,-(1/2),1/2,0],[0,0,0,0]) $

declare([a,b],scalar) ;
done $

O:a*ket([1]) . bra([0])+b*ket([0]) . bra([1]) ;
ket([1]) . bra([0])*a+tpbra(1,bra([3/2,1/2]),bra([1/2,1/2]))                               *ket([0]) . bra([1])
$

B:[ket([1]),ket([0])] ;
[ket([1]),ket([0])] $

matrep(O,B) ;
matrix([tpbra(1,bra([3/2,1/2]),bra([1/2,1/2]))*ket([0]) . bra([1]),a],                [0,tpbra(1,bra([3/2,1/2]),bra([1/2,1/2]))*ket([0]) . bra([1])])
$

basis_set(2,[0,1]) ;
[ket([1,1]),ket([1,0]),ket([0,1]),ket([0,0])] $

basis_set(3,[u,d]) ;
[ket([d,d,d]),ket([d,d,u]),ket([d,u,d]),ket([d,u,u]),ket([u,d,d]),          ket([u,d,u]),ket([u,u,d]),ket([u,u,u])]
$

B:basis_set(1,[0,1]) ;
[ket([1]),ket([0])] $

complete(B) ;
ket([1]) . bra([1])+ket([0]) . bra([0]) $

b1:tpket(ket([1/2,1/2]),ket([1/2,1/2])) ;
tpket(1,ket([1/2,1/2]),ket([1/2,1/2])) $

b2:tpket(ket([1/2,1/2]),ket([1/2,-1/2])) ;
tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)])) $

b3:tpket(ket([1/2,-1/2]),ket([1/2,1/2])) ;
tpket(1,ket([1/2,-(1/2)]),ket([1/2,1/2])) $

b4:tpket(ket([1/2,-1/2]),ket([1/2,-1/2])) ;
tpket(1,ket([1/2,-(1/2)]),ket([1/2,-(1/2)])) $

B:[b1,b2,b3,b4] ;
[tpket(1,ket([1/2,1/2]),ket([1/2,1/2])),          tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)])),
         tpket(1,ket([1/2,-(1/2)]),ket([1/2,1/2])),
         tpket(1,ket([1/2,-(1/2)]),ket([1/2,-(1/2)]))]
$

H1:omega*(J1z-J2z) ;
(J1z-J2z)*omega $

declare(omega,scalar) ;
done $

matrep(H1,B) ;
matrix([0,0,0,0],[0,omega*ħ,0,0],[0,0,-(omega*ħ),0],[0,0,0,0]) $

declare(A,scalar) ;
done $

Hhyp:(A/hbar^2)*(J1p2m+J1m2p+2*J1zJ2z) ;
(A*(2*J1zJ2z+J1p2m+J1m2p))/ħ^2 $

Hmat:matrep(Hhyp,bj1212) ;
matrix([A/2,0,0,0],[0,-(A/2),A,0],[0,A,-(A/2),0],[0,0,0,A/2]) $

[evals,evecs]:eigenvectors(Hmat) ;
[[[-((3*A)/2),A/2],[1,3]],[[[0,1,-1,0]],                                    [[1,0,0,0],[0,1,1,0],[0,0,0,1]]]]
$

states:stationary(evals,evecs,bj1212) ;
[tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)]))           +tpket(-1,ket([1/2,-(1/2)]),ket([1/2,1/2])),
         tpket(1,ket([1/2,1/2]),ket([1/2,1/2])),
         tpket(1,ket([1/2,1/2]),ket([1/2,-(1/2)]))
          +tpket(1,ket([1/2,-(1/2)]),ket([1/2,1/2])),
         tpket(1,ket([1/2,-(1/2)]),ket([1/2,-(1/2)]))]
$

Jtz(states[1]) ;
0 $

B:[ket([1]),ket([0])] ;
[ket([1]),ket([0])] $

declare(c,scalar) ;
done $

A:c*ket([1]) . bra([1]) ;
ket([1]) . bra([1])*c $

matrep(A,B) ;
matrix([c,0],[0,0]) $

qm_atrace(A,B) ;
c $

bell:(1/sqrt(2))*(ket([1,0])-ket([0,1])) ;
(ket([1,0])-ket([0,1]))/sqrt(2) $

rho:bell . dagger(bell) ;
(ket([1,0]) . bra([1,0])-ket([1,0]) . bra([0,1])                                 -ket([0,1]) . bra([1,0])
                                +ket([0,1]) . bra([0,1]))
 /2
$

trace1:bra([1,Id]) . rho . ket([1,Id])+bra([0,Id]) . rho . ket([0,Id]) ;
ket(["-",1]) . bra(["-",1])/2+ket(["-",0]) . bra(["-",0])/2 $

B:[ket([Id,1]),ket([Id,0])] ;
[ket([Id,1]),ket([Id,0])] $

matrep(trace1,B) ;
matrix([1/2,0],[0,1/2]) $

declare(n,integer,n,scalar) ;
done $

ap . ket([n]) ;
sqrt(n+1)*ket([n+1]) $

am . ket([n]) ;
ket([n-1])*sqrt(n) $

bra([n]) . (ap+am)^^4 . ket([n]) ;
6*n^2+6*n+3 $

declare_qop(H) ;
qop $

bra([i]) . H . ket([j]) ;
H[i,j] $

declare_eigenop(H) ;
eigenop $

H . ket([j]) ;
E[j]*ket([j]) $

bra([i]) . H . ket([j]) ;
kron_delta(i,j)*E[j] $

declare_qop(H) ;
qop $

declare(c,complex) ;
done $

depends(c,t) ;
[c(t)] $

psi:sum(c[i]*ket([i]),i,1,N) ;
'sum(c[i]*ket([i]),i,1,N) $

schro:%i*diff(psi,t) = H . psi ;
%i*'sum('diff(c[i],t,1)*ket([i]),i,1,N) = 'sum(c[i]*E[i]*ket([i]),i,1,                                                        N)
$

bra([j]) . schro ;
%i*'diff(c[j],t,1) = c[j]*E[j] $

declare_qop(H) ;
qop $

psi2:c[1](t)*ket([1])+c[2](t)*ket([2]) ;
ket([2])*c[2](t)+ket([1])*c[1](t) $

schro2:%i*diff(psi2,t) = H . psi2 ;
%i*(ket([2])*'diff(c[2](t),t,1)+ket([1])*'diff(c[1](t),t,1))   = E[2]*ket([2])*c[2](t)+E[1]*ket([1])*c[1](t)
$

eq1:bra([1]) . schro2 ;
%i*'diff(c[1](t),t,1) = E[1]*c[1](t) $

eq2:bra([2]) . schro2 ;
%i*'diff(c[2](t),t,1) = E[2]*c[2](t) $

H:matrix([E0,-A],[-A,E0]) ;
matrix([E0,-(ket([1]) . bra([1])*c)],[-(ket([1]) . bra([1])*c),E0]) $

assume(A > 0,E0 > 0) ;
[ket([1]) . bra([1])*c > 0,E0 > 0] $

eq1:%i*'diff(c[1](t),t,1) = H[1,2]*c[2](t)+H[1,1]*c[1](t) ;
%i*'diff(c[1](t),t,1) = E0*c[1](t)-ket([1]) . bra([1])*c*c[2](t) $

eq2:%i*'diff(c[2](t),t,1) = H[2,2]*c[2](t)+H[2,1]*c[1](t) ;
%i*'diff(c[2](t),t,1) = E0*c[2](t)-ket([1]) . bra([1])*c*c[1](t) $

soln:desolve([eq1,eq2],[c[1](t),c[2](t)]) ;
[c[1](t) = %e^-(%i*E0*t)*(((2*(%i*c[1](0)*E0                                       +%i*c[2](0)*ket([1]) . bra([1])*c)
                                 -2*%i*c[1](0)*E0)
                                 *sin(ket([1]) . bra([1])*c*t))
                                 /(2*ket([1]) . bra([1])*c)
                                 +c[1](0)*cos(ket([1]) . bra([1])*c*t)),
         c[2](t) = %e^-(%i*E0*t)*(((2*(%i*c[2](0)*E0
                                      +%i*c[1](0)*ket([1]) . bra([1])*c)
                                 -2*%i*c[2](0)*E0)
                                 *sin(ket([1]) . bra([1])*c*t))
                                 /(2*ket([1]) . bra([1])*c)
                                 +c[2](0)*cos(ket([1]) . bra([1])*c*t))]
$

add:fullsimp(soln[1]+soln[2]) ;
c[2](t)+c[1](t) = %e^(%i*ket([1]) . bra([1])*c*t-%i*E0*t)                         *(c[2](0)+c[1](0))
$

sub:fullsimp(soln[1]-soln[2]) ;
c[1](t)-c[2](t) = -(%e^(-(%i*E0*t)-%i*ket([1]) . bra([1])*c*t)                         *(c[2](0)-c[1](0)))
