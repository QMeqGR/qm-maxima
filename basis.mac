/*
;;  Author Eric Majzoub, Department of Physics and Astronomy
;;  University of Missouri, St. Louis
;;  Copyright (C) 2024 Eric Majzoub

;;  This program is free software; you can redistribute it and/or modify 
;;  it under the terms of the GNU General Public License as published by         
;;  the Free Software Foundation; either version 2 of the License, or            
;;  (at your option) any later version.                                  
                                                                                 
;;  This program is distributed in the hope that it will be useful,              
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of               
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                
;;  GNU General Public License for more details.         

;; Quantum mechanics package for Maxima.
*/

/* Basis set utilities */
/* E.H. Majzoub        */
/* GPL 3 or greater    */

/*****************************/
/*  create simple basis sets */
/*****************************/
basis_set(n,L) := block([M,Mnew,ops,m,cv,i,N],
    if listp(L)=false then return( disp("second arg must be a list")),
    m:length(L),
    if n<1 then return( disp("must have at least one particle present!")),
    if m<1 then return( disp("must have at least one state per particle!")),
    /* 1 particle states */
    ops: transpose( matrix( makelist(L[i],i,m) ) ),
    if n=1 then return( make_bkets(ops,m) ),
    /* 2 particles and higher */
    M:ops, Mnew:ops,
    for N: 1 thru n-1 do
        (M:Mnew,
        for i: 1 thru m do
            (cv[i]: transpose( matrix( makelist(L[i],j,m^N) ) ),
            if i=1 then Mnew: addcol(cv[i],M) else
            Mnew: addrow(Mnew, addcol(cv[i],M) ) )
        ),
        return( make_bkets(Mnew,m^n) ) )$

make_bkets(M,n) := block([basis:[]],
    l: length(row(M,1)),
    for j: 1 thru n do
        ( newket: [ ket( makelist(row(M,j)[i],i,l)[1] ) ],
          basis: append(basis, newket) ),
     reverse(basis) );

/*************************/
/* Matrix rep basis sets */
/*************************/
basis_set_p(B):=block([N:length(B)],
  for i: 1 thru N do
    if mketp(B[i])=false and ketp(B[i])=false and tpketp(B[i])=false
    then return(false) else return(true) );

mtrans(B1,B2):=block([N1:length(B1),N2:length(B2),M],
  if basis_set_p(B1)=false or basis_set_p(B2)=false or N1#N2 then
     return(disp("Bad basis set(s)")),
  /* construct the transition matrix */
  M: zeromatrix(N1,N1),
  for i: 1 thru N1 do
     for j: 1 thru N1 do
        M[i,j]: dagger(B1[i]) . B2[j],
  M);

/* transform operator A from basis B1 to basis B2 */
op_trans(A,B1,B2):=block([N1:length(B1),N2:length(B2),M,Md],
  if basis_set_p(B1)=false or basis_set_p(B2)=false or N1#N2 then
     return(disp("Bad basis set(s)")),
  /* construct the transition matrix */
  M: mtrans(B1,B2), Md: dagger(M),
  Md . A . M);


/* construct the completeness relation */
complete(B):=block([N,CR:0],
  if basis_set_p(B)=false then return(disp("Bad basis set arg.")),
  N:length(B),
  for i: 1 thru N do
  CR: CR + B[i] . dagger(B[i]),
  CR);

/*******************************/
/*   Abstract basis sets       */
/*******************************/

/* Construct matrix representation of an operator A
in basis B. Note: if there are symbols as coefficients
in the kets, they must be declared 'scalar' for the
rules to work. */
matrep(A,B):=block([N:length(B),M,dotscrules:true,listarith:false],
  M: zeromatrix(N,N),
  for i: 1 thru N do
     for j: 1 thru N do
        if freeof("+",A)=false then /* allows for claculations with H = H1 + H2 +... */
           block([rho:expand(A)],
           for k: 1 thru length(rho) do
              if tpketp(B[i]) then M[i,j]: M[i,j] + tpbraket(tpdagger(B[i]) , part(rho,k) . B[j])
              else M[i,j]: M[i,j] + dagger(B[i]) . part(rho,k) . B[j])
        else
              if tpketp(B[i]) then M[i,j]: tpbraket(tpdagger(B[i]) , A . B[j])
              else M[i,j]: dagger(B[i]) . A . B[j],        
M);

/****************************/
/*        QM trace          */
/****************************/
/* matrix trace */
qm_mtrace(M) := if matrixp(M) then
      block([n:matrix_size(M)[1],m:matrix_size(M)[2],tr:0],
            if n # m then return(disp("matrix is not square"))
            else for i: 1 thru n do tr: tr + M[i,i], tr)
      else disp("function requires matrix as input");

/* abstract trace */
qm_atrace(A,B) := qm_mtrace( matrep(A,B) );

/************************************/
/* Construct stationary states      */
/* From eigenvalues/vectors of      */
/* a Hamiltonian.                   */
/************************************/
stationary(evals,evecs,basis):=block([degen:evals[2],i,j,states:[]],
    for i: 1 thru length(degen) do
        for j: 1 thru degen[i] do
            block([l:length(evecs[i][j]),k,R:0],
                for k: 1 thru l do
                    (if mketp(basis[1])=true then R: R+evecs[i][j][k]*basis[k],
                     if  ketp(basis[1])=true then R: R+evecs[i][j][k]*basis[k],
                     if tpketp(basis[1])=true then R: tpadd(R, tpscmult(evecs[i][j][k], basis[k])) ),
            states:append(states,[R]) ),
states)$
