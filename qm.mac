/*
;;  Author Eric Majzoub, Department of Physics and Astronomy
;;  University of Missouri, St. Louis
;;  Copyright (C) 2024 Eric Majzoub

;;  This program is free software; you can redistribute it and/or modify 
;;  it under the terms of the GNU General Public License as published by         
;;  the Free Software Foundation; either version 2 of the License, or            
;;  (at your option) any later version.                                  
                                                                                 
;;  This program is distributed in the hope that it will be useful,              
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of               
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                
;;  GNU General Public License for more details.         

;; Quantum mechanics package for Maxima.
*/

if get('qm,'qm_version)#false then error("Package qm already loaded!")$
put('qm,'0.95,'qm_version)$

/* load additional codes */
load("qm.lisp") $
load("autoket.mac") $
load("tprod.mac") $
load("qho.mac") $
load("basis.mac") $
load("predef.mac") $

/* load the documentation */
load("qm-index.lisp")$
load("qm-index-html.lisp")$

/******************/
/*    flags       */
/******************/

/*********************************/
/*     auxiliary functions       */
/*********************************/
/* This version of the matrix exponential was
   suggested by Oscar Benjamin on the Maxima
   discuss list. In my tests it is faster
   than the core function matrixexp. The version
   below is from Barton Willis. */
matexp(m,t) := block([z : gensym()],
    require_square_matrix(m,'first,'my_matrix_exp),
    matrixmap(lambda([q], ilt(q,z,t)),(z*identfor(m) - m)^^-1))$

/*****************************************/
/*    complexp and realp predicates      */
/*****************************************/
/* This definition of complexp finds anything declared complex to be true */
complexp(z):=block([y:imagpart(z)],
	if featurep(z,complex) or featurep(conjugate(z),complex) then return(true),
	if y#0 and numberp(y) then return(true),
	false);
realp(r):=block(if featurep(r,real) and complexp(r)=false and not matrixp(r)
		   then return(true), false);	

/******************************/
/* Simplification definitions */
/******************************/
matchdeclare([x,y],freeof(%i));
matchdeclare([cc],numberp);
tellsimpafter(%e^x*(%e^y+cc),%e^(x+y)+cc*%e^x);
tellsimpafter(%e^x*(cc-%e^y),cc*%e^x-%e^(x+y));

matchdeclare(x,freeof(%i));
tellsimpafter(%e^x+%e^(-x),2*cosh(x));
tellsimpafter(%e^x-%e^(-x),2*sinh(x));
tellsimpafter(sinh(x)/cosh(x),tanh(x));
tellsimpafter(cos(x)+%i*sin(x),%e^(%i*x));
tellsimpafter(cos(x)-%i*sin(x),%e^(-%i*x));

/*******************************/
/* Constants and assumptions   */
/*******************************/
declare([hbar,ħ],[real,scalar]) $
assume(hbar>0) $
if display2d_unicode=true then hbar:ħ;

/************************/
/* make simple vectors  */
/************************/
/* Real column and row vectors, Note: kets and bras are below */
cvec([u]) := transpose(matrix(u)) $
rvec([u]) := matrix(u) $

/***************************************************/
/* implement bra, ket operators via simplification */
/***************************************************/
/* bras and kets entered as lists will be given matrix representations */
/* bra and ket of a list represented as row and column matrices, respectively */
matchdeclare(ll, listp);
tellsimpafter(mbra(ll), matrix(ll));
tellsimpafter(mket(ll), transpose(matrix (ll)));

/***************************************/
/* Rules, simp for general kets/bras   */
/***************************************/
/* predicates for general bras and kets, thanks to BW */
ketp(psi) := not mapatom(psi) and is(inpart(psi,0) = 'ket) $
brap(psi) := not mapatom(psi) and is(inpart(psi,0) = 'bra) $

/**********/
/* dagger */
/**********/
declare(dagger,additive);
declare(dagger,multiplicative);

matchdeclare([i,j],all,mm,mapatom,nn,integerp);
simp:false; tellsimp( dagger(dagger(i)) , i); simp:true;
simp:false; tellsimp( dagger(mm^nn), dagger(mm)^nn ); simp:true;
simp:false; tellsimp( dagger( i . j ) , dagger(j) . dagger(i) ); simp:true;

/* dagger for general kets and bras */
matchdeclare([i,j],all,[L1,L2],listp);
tellsimpafter( dagger( bra(L1) ), ket(L1) );
tellsimpafter( dagger( ket(L1) ), bra(L1) );
tellsimpafter( dagger( i*ket(L1)), dagger(i)*bra(L1) );
tellsimpafter( dagger( i*bra(L1)), dagger(i)*ket(L1) );

/* simplify dagger for complex and real numbers */
matchdeclare(cx,complexp,rx,numberp,rr,realp);
simp:false; tellsimp( dagger(cx) , conjugate(cx) ); simp:true;
simp:false; tellsimp( dagger(rx) , rx ); simp:true;
simp:false; tellsimp( dagger(rr) , rr ); simp:true;

/* special case of dagger for matrix argument */
matchdeclare(mx, matrixp,nn,integerp);
simp:false; tellsimp( dagger( mx^nn ), dagger(mx)^nn ); simp:true;
simp:false; tellsimp( dagger( mx^^nn ), dagger(mx)^^nn ); simp:true;
tellsimpafter( dagger(mx), conjugate(transpose (mx)) );

/********************/
/*    braket        */
/********************/
/* braket rules for matrix reps */
matchdeclare([kk,ll], mketp, bb, mbrap );
tellsimpafter( braket(bb,kk) , bb . kk );
tellsimpafter( braket(ll,kk) , false );
tellsimpafter( braket(kk,bb) , false );
tellsimpafter( braket(bb,bb) , false );

/***************************************/
/* braket rules for general kets bras  */
/***************************************/
/* Note that we do calculations by going from "bra . ket" to "braket(bra,ket)",
   which is defined for only one bra and one ket. If the bra or ket is a sum of
   bras or kets, then use ".", i.e. (bra1 + bra2) . (ket), which has rules
   below to go to bra1.ket + bra2.ket = braket(bra1,ket) + braket(bra2,ket).
*/
   
/* these rules are experimental, they only go one way */
tellsimp( ket(L1) . ket(L2) , ket(append(L1,L2)) );
tellsimp( bra(L1) . bra(L2) , bra(append(L1,L2)) );

cnump(z):=if complexp(z) or numberp(z) then true;
matchdeclare([a,b,A1,A2],all,[L1,L2],listp);
tellsimpafter( a . (A1+A2), expand(a . (A1 + A2)) );

matchdeclare([cx1,cx2],lambda([x],scalarp(x) or cnump(x)));
tellsimpafter( cx1*bra(L1) . cx2*ket(L2), cx1*cx2*(bra(L1) . ket(L2)) );
tellsimpafter( bra(L1)*cx1 . cx2*ket(L2), cx1*cx2*(bra(L1) . ket(L2)) );
tellsimpafter( bra(L1)*cx1 . ket(L2)*cx2, cx1*cx2*(bra(L1) . ket(L2)) );
tellsimpafter( bra(L1)*cx1 . ket(L2)*cx2, cx1*cx2*(bra(L1) . ket(L2)) );

/* Very important rule that allows simplification of general expressions. */
/* This works because of the way the simplifier outputs things in () */
tellsimpafter( (bra(L1)*a) . (ket(L2)*b), a*b*(bra(L1) . ket(L2)));

/* bra . ket ---> braket(bra,ket) */
matchdeclare([L1,L2,L3],listp,[a,b],all);
tellsimpafter(bra(L1) . ket(L2) . a , braket(bra(L1),ket(L2)) . a);
tellsimpafter(a . bra(L1) . ket(L2) , a . braket(bra(L1),ket(L2)));
tellsimpafter(a . bra(L1) . ket(L2) . b , a . braket(bra(L1),ket(L2)) . b);

/* <a|b> --> delta(a,b), assumes an orthonormal set */
tellsimpafter( bra(L1) . ket(L2), braket(bra(L1),ket(L2)));
tellsimpafter( braket(bra(L1),ket(L2)), gsimpbraket(L1,L2) );
gsimpbraket(L1,L2):=block([i,l1flag:0,l2flag:0,prod:1,
	L3:makelist("-",i,length(L1)),L4:makelist("-",i,length(L2))],
	if length(L1)#length(L2) then return(false),
	for i: 1 thru length(L1) do
	    if L1[i]=Id then (L4[i]:L2[i],l1flag:1)
	    elseif L2[i]=Id then (L3[i]:L1[i],l2flag:1) else
	    prod: prod * kron_delta(L1[i],L2[i]),
	    if l1flag=1 then return(prod*ket(L4))
	    elseif l2flag=1 then return(prod*bra(L3))
	    else return(prod) );

/* This rule is for when, after a partial trace one wants
to compute the matrix representation of the reduced densiy
matrix. Terms will end up containing totally traced out
bras and kets. */
tellsimpafter( ket(["-","-"]) . bra(["-","-"]) , 1 );
tellsimpafter( ket(["-","-","-"]) . bra(["-","-","-"]) , 1 );
tellsimpafter( ket(["-","-","-","-"]) . bra(["-","-","-","-"]) , 1 );

/*********************************/
/*     miscellaneous rules       */
/*********************************/
/* norm for matrix represented kets/bras */
matchdeclare( kk, mketp, bb, mbrap );
tellsimpafter(norm(kk), sqrt( braket(dagger(kk),kk) ));
tellsimpafter(norm(bb), sqrt( braket(bb,dagger(bb)) ));

/* norm for abstract kets/bras */
matchdeclare( ak, ketp, ab, brap );
tellsimpafter(norm(ak),1);
tellsimpafter(norm(ab),1);

/* magsqr */
magsqr(c) := c*conjugate(c);

/* commutator */
commutator(X,Y) := X.Y - Y.X;
anticommutator(X,Y) := X.Y + Y.X;
expect(Op,psi) := dagger(psi) . Op . psi $
qm_variance(Op,psi) := sqrt(expect(Op . Op,psi) - expect(Op,psi)^2) $

/* Born rule */
probability(psi,n) := magsqr(psi[n]);

/***************************************/
/* Define predicates for kets and bras */
/***************************************/
mketp(psi) := block([r,c],
     if matrixp(psi) then (
        [r,c] : matrix_size(psi),
        (c = 1) and (r > 1) and every(lambda([q], not (matrixp(q) or listp(q) or setp(q))), psi))
    else false);
mbrap(psi) := block([r,c],
     if matrixp(psi) then (
        [r,c] : matrix_size(psi),
        (r = 1) and (c > 1) and every(lambda([q], not (matrixp(q) or listp(q) or setp(q))), psi))
    else false);



/******************************************************/
/******************************************************/
/*              (j,m) kets and bras                   */
/******************************************************/
/******************************************************/
/* There are no longer any matrix reps for the jm kets and bras */

rationalp(a):= if integerp(num(a)) and integerp(denom(a)) then true else false;
sym_ratp(a):=block(if symbolp(a) or rationalp(a) then
		      return(true) else return(false) );
matchdeclare(k,ketp,bb,brap,[j,m], sym_ratp );

/* some convenience functions */
jmtop(j):=ket([abs(j),abs(j)]);
jmket(j,m):=ket([j,m]);
jmbot(j):=ket([abs(j),-abs(j)]);

/* Check that m is within -j to +j */
jmcheck(j,m) := block([pos:0],
	      if rationalp(j)=false or rationalp(m)=false then return(false) else
	      	 for jn: j step -1 thru -j do
		     if jn=m then pos:1,
		 if pos=1 then true else false )$

jmketp(k) := jmcheck( inpart(k,1)[1], inpart(k,1)[2] );
jmbrap(bb) := jmcheck( inpart(bb,1)[1], inpart(bb,1)[2] );

declare([Jp,Jm,Jsqr,Jz],additive);

matchdeclare(k,ketp,bb,brap,a,all);
tellsimpafter( Jp(a*k), a*Jp(k) );
tellsimpafter( Jp(k), block([j,m,sqrterm],
      j:inpart(k,1)[1], m:inpart(k,1)[2], sqrterm:sqrt(j*(j+1)-m*(m+1))*hbar,
      return( sqrterm * ket([j,m+1]) ) ) );
tellsimpafter( Jm(a*k), a*Jm(k) );
tellsimpafter( Jm(k), block([j,m,sqrterm],
      j:inpart(k,1)[1], m:inpart(k,1)[2], sqrterm:sqrt(j*(j+1)-m*(m-1))*hbar,
      return( sqrterm * ket([j,m-1]) ) ) );
tellsimpafter( Jsqr(a*k), a*Jsqr(k) );
tellsimpafter( Jsqr(k), block([j,m],
      j:inpart(k,1)[1], m:inpart(k,1)[2], return( (j*(j+1)) * hbar^2 * ket([j,m]) ) ));
tellsimpafter( Jz(a*k), a*Jz(k) );
tellsimpafter( Jz(k), block([j,m],
      j:inpart(k,1)[1], m:inpart(k,1)[2], return( ( m * hbar * ket([j,m]) ) )));

/* These rules allow one to add operators together */
tellsimpafter( Jp . k, Jp(k) );
tellsimpafter( Jm . k, Jm(k) );
tellsimpafter( Jz . k, Jz(k) );
tellsimpafter( Jsqr . k, Jsqr(k) );

/******************************************************/
/******************************************************/
/* Angular momentum ladder operators for general spin */
/******************************************************/
/******************************************************/
SP(s) := genmatrix(lambda([i,j], block([m:-s+j-2],
         hbar*kron_delta(i,j-1)*sqrt( s*(s+1)-m*(m+1)) )), 2*s+1,2*s+1);
SM(s) := dagger(SP(s))$
SX(s) := (1/2)*(SP(s)+SM(s))$
SY(s) := (%i/2)*(SM(s)-SP(s))$
SZ(s) := 1/(%i*hbar)*commutator(SX(s),SY(s))$


/******************/
/* Spin-1/2 stuff */
/******************/

/* spin-1/2 state vectors */
zp : cvec(1,0) $
zm : cvec(0,1) $
xp : (1/sqrt(2))*(zp+zm) $
xm : (1/sqrt(2))*(zp-zm) $
yp : (1/sqrt(2))*(zp+%i*zm) $
ym : (1/sqrt(2))*(zp-%i*zm) $

/* Pauli sigma matrices */
sigmax : matrix([0,1],[1,0]) $
sigmay : matrix([0,-%i],[%i,0]) $
sigmaz : matrix([1,0],[0,-1]) $

/* spin-1/2 matrices */
Sz : SZ(1/2) $
Sx : SX(1/2) $
Sy : SY(1/2) $

/******************/
/* Spin-1 stuff */
/******************/

/* basis states for a spin-1 particle */
zu : cvec(1,0,0) $
zz : cvec(0,1,0) $
zd : cvec(0,0,1) $

/* spin-1 matrices
Sz1 : hbar*matrix([1,0,0],[0,0,0],[0,0,-1]) $
Sx1 : (hbar/sqrt(2))*matrix([0,1,0],[1,0,1],[0,1,0]) $
Sy1 : (hbar/sqrt(2))*matrix([0,-%i,0],[%i,0,-%i],[0,%i,0]) $ */
Sz1 : SZ(1) $
Sx1 : SX(1) $
Sy1 : SY(1) $


/****************************************/
/*         Rotation Operators           */
/****************************************/
Rot(Op,phi) := block([M1,M2,M3],
	  /* M1: matrixexp(-%i*Op*phi/hbar), uses core function */
	  M1: matexp(-%i*Op/hbar,phi),
	  M2: matrixmap(distrib,M1),
	  M3: matrixmap(combine,M2),
	  trigreduce(M3)
	  )$

/* the following is so RZ appears with exponentials
   and RX and RY with trig functions */
RZ(s,t) := Rot(SZ(s),t)$
RX(s,t) := block([demoivre:true], Rot(SX(s),t))$
RY(s,t) := block([demoivre:true], Rot(SY(s),t))$

/* time-evolution operator */
U(H,t) := block([M,demoivre:true], Rot(H,t))$

